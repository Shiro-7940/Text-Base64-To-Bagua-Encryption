'''
Simple functions to replace base64 encoded string with Chinese Bagua symbols.
https://en.wikipedia.org/wiki/Bagua For more info about Bagua.
Notice that the converted Bagua string's appearance will not correspond to the base64 characters' binary representation,
since the conversion is performed according to the Unicode order.
(Might have a update about that.)
'''
def encode_bagua(input_str_e):
    input_str_e = str(input_str_e
        .replace ( 'A', '\u4DC0' )
        .replace ( 'B', '\u4DC1' )
        .replace ( 'C', '\u4DC2' )
        .replace ( 'D', '\u4DC3' )
        .replace ( 'E', '\u4DC4' )
        .replace ( 'F', '\u4DC5' )
        .replace ( 'G', '\u4DC6' )
        .replace ( 'H', '\u4DC7' )
        .replace ( 'I', '\u4DC8' )
        .replace ( 'J', '\u4DC9' )
        .replace ( 'K', '\u4DCA' )
        .replace ( 'L', '\u4DCB' )
        .replace ( 'M', '\u4DCC' )
        .replace ( 'N', '\u4DCD' )
        .replace ( 'O', '\u4DCE' )
        .replace ( 'P', '\u4DCF' )
        .replace ( 'Q', '\u4DD0' )
        .replace ( 'R', '\u4DD1' )
        .replace ( 'S', '\u4DD2' )
        .replace ( 'T', '\u4DD3' )
        .replace ( 'U', '\u4DD4' )
        .replace ( 'V', '\u4DD5' )
        .replace ( 'W', '\u4DD6' )
        .replace ( 'X', '\u4DD7' )
        .replace ( 'Y', '\u4DD8' )
        .replace ( 'Z', '\u4DD9' )
        .replace ( 'a', '\u4DDA' )
        .replace ( 'b', '\u4DDB' )
        .replace ( 'c', '\u4DDC' )
        .replace ( 'd', '\u4DDD' )
        .replace ( 'e', '\u4DDE' )
        .replace ( 'f', '\u4DDF' )
        .replace ( 'g', '\u4DE0' )
        .replace ( 'h', '\u4DE1' )
        .replace ( 'i', '\u4DE2' )
        .replace ( 'j', '\u4DE3' )
        .replace ( 'k', '\u4DE4' )
        .replace ( 'l', '\u4DE5' )
        .replace ( 'm', '\u4DE6' )
        .replace ( 'n', '\u4DE7' )
        .replace ( 'o', '\u4DE8' )
        .replace ( 'p', '\u4DE9' )
        .replace ( 'q', '\u4DEA' )
        .replace ( 'r', '\u4DEB' )
        .replace ( 's', '\u4DEC' )
        .replace ( 't', '\u4DED' )
        .replace ( 'u', '\u4DEE' )
        .replace ( 'v', '\u4DEF' )
        .replace ( 'w', '\u4DF0' )
        .replace ( 'x', '\u4DF1' )
        .replace ( 'y', '\u4DF2' )
        .replace ( 'z', '\u4DF3' )
        .replace ( '0', '\u4DF4' )
        .replace ( '1', '\u4DF5' )
        .replace ( '2', '\u4DF6' )
        .replace ( '3', '\u4DF7' )
        .replace ( '4', '\u4DF8' )
        .replace ( '5', '\u4DF9' )
        .replace ( '6', '\u4DFA' )
        .replace ( '7', '\u4DFB' )
        .replace ( '8', '\u4DFC' )
        .replace ( '9', '\u4DFD' )
        .replace ( '+', '\u4DFE' )
        .replace ( '/', '\u4DFF' )
        .replace ( '=', '\u262F' )
               )
    return input_str_e
# Encode end


def decode_bagua(input_str_d):
    input_str_d = str(input_str_d
        .replace ( '\u4DC0', 'A' )
        .replace ( '\u4DC1', 'B' )
        .replace ( '\u4DC2', 'C' )
        .replace ( '\u4DC3', 'D' )
        .replace ( '\u4DC4', 'E' )
        .replace ( '\u4DC5', 'F' )
        .replace ( '\u4DC6', 'G' )
        .replace ( '\u4DC7', 'H' ) 
        .replace ( '\u4DC8', 'I' )
        .replace ( '\u4DC9', 'J' )
        .replace ( '\u4DCA', 'K' )
        .replace ( '\u4DCB', 'L' )
        .replace ( '\u4DCC', 'M' )
        .replace ( '\u4DCD', 'N' )
        .replace ( '\u4DCE', 'O' )
        .replace ( '\u4DCF', 'P' )
        .replace ( '\u4DD0', 'Q' )
        .replace ( '\u4DD1', 'R' )
        .replace ( '\u4DD2', 'S' )
        .replace ( '\u4DD3', 'T' )
        .replace ( '\u4DD4', 'U' )
        .replace ( '\u4DD5', 'V' )
        .replace ( '\u4DD6', 'W' )
        .replace ( '\u4DD7', 'X' )
        .replace ( '\u4DD8', 'Y' )
        .replace ( '\u4DD9', 'Z' )
        .replace ( '\u4DDA', 'a' )
        .replace ( '\u4DDB', 'b' )
        .replace ( '\u4DDC', 'c' )
        .replace ( '\u4DDD', 'd' )
        .replace ( '\u4DDE', 'e' )
        .replace ( '\u4DDF', 'f' )
        .replace ( '\u4DE0', 'g' )
        .replace ( '\u4DE1', 'h' )
        .replace ( '\u4DE2', 'i' )
        .replace ( '\u4DE3', 'j' )
        .replace ( '\u4DE4', 'k' )
        .replace ( '\u4DE5', 'l' )
        .replace ( '\u4DE6', 'm' )
        .replace ( '\u4DE7', 'n' )
        .replace ( '\u4DE8', 'o' )
        .replace ( '\u4DE9', 'p' )
        .replace ( '\u4DEA', 'q' )
        .replace ( '\u4DEB', 'r' )
        .replace ( '\u4DEC', 's' )
        .replace ( '\u4DED', 't' )
        .replace ( '\u4DEE', 'u' )
        .replace ( '\u4DEF', 'v' )
        .replace ( '\u4DF0', 'w' )
        .replace ( '\u4DF1', 'x' )
        .replace ( '\u4DF2', 'y' )
        .replace ( '\u4DF3', 'z' )
        .replace ( '\u4DF4', '0' )
        .replace ( '\u4DF5', '1' )
        .replace ( '\u4DF6', '2' )
        .replace ( '\u4DF7', '3' )
        .replace ( '\u4DF8', '4' )
        .replace ( '\u4DF9', '5' )
        .replace ( '\u4DFA', '6' )
        .replace ( '\u4DFB', '7' )
        .replace ( '\u4DFC', '8' )
        .replace ( '\u4DFD', '9' )
        .replace ( '\u4DFE', '+' )
        .replace ( '\u4DFF', '/' )
        .replace ( '\u262F', '=' )
        )    
    return input_str_d
#Decode end
